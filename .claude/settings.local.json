{
  "permissions": {
    "allow": [
      "Bash(mkdir:*)",
      "Bash(chmod:*)",
      "Bash(grep:*)",
      "WebFetch(domain:github.com)",
      "Bash(curl:*)",
      "Bash(docker-compose ps:*)",
      "Bash(docker-compose:*)",
      "Bash(./scripts/local-deploy.sh:*)",
      "Bash(docker exec:*)",
      "Bash(docker logs:*)",
      "Bash(docker restart:*)",
      "Bash(find:*)",
      "Bash(python -m pytest tests/unit/test_cloudflare_config.py -v)",
      "Bash(ls:*)",
      "Bash(source:*)",
      "Bash(make:*)",
      "Bash(.venv/bin/python -m pytest tests/unit/test_cloudflare_config.py -v)",
      "Bash(.venv/bin/python:*)",
      "Bash(rm:*)",
      "Bash(git --no-pager diff)",
      "Bash(pip install:*)",
      "Bash(rg:*)",
      "Bash(mv:*)",
      "Bash(black:*)",
      "Bash(python -m black:*)",
      "Bash(python3 -m black:*)",
      "Bash(sed:*)",
      "Bash(python:*)",
      "Bash(flake8:*)",
      "Bash(isort:*)",
      "Bash(pip3 install:*)",
      "Bash(JSII_SILENCE_WARNING_UNTESTED_NODE_VERSION=1 .venv/bin/python -c \"\nimport subprocess\nimport sys\n\ndef run_command(cmd, description):\n    print(f'\\\\n=== {description} ===')\n    try:\n        result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=60)\n        if result.returncode == 0:\n            print(f'✓ {description} passed')\n            return True\n        else:\n            print(f'✗ {description} failed:')\n            print(result.stdout)\n            print(result.stderr)\n            return False\n    except subprocess.TimeoutExpired:\n        print(f'⚠ {description} timed out')\n        return False\n    except Exception as e:\n        print(f'✗ {description} error: {e}')\n        return False\n\n# Run key checks\nchecks = [\n    ('source .venv/bin/activate && python -m flake8 tests/integration/test_config_validation.py n8n_deploy/config/config_loader.py', 'Linting'),\n    ('source .venv/bin/activate && python -m pytest tests/integration/test_config_validation.py --tb=no -q', 'Config Integration Tests'),\n    ('source .venv/bin/activate && python -m pytest tests/unit/test_config_loader.py --tb=no -q', 'Config Unit Tests'),\n]\n\nall_passed = True\nfor cmd, desc in checks:\n    if not run_command(cmd, desc):\n        all_passed = False\n\nprint(f'\\\\n=== SUMMARY ===')\nif all_passed:\n    print('✓ All checks passed!')\nelse:\n    print('✗ Some checks failed')\n    sys.exit(1)\n\")"
    ],
    "deny": []
  }
}