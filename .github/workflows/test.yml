name: Test and Lint

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run linting
      run: |
        # Black formatting check
        black --check n8n_deploy tests
        
        # Flake8 linting
        flake8 n8n_deploy tests
        
        # isort import sorting check
        isort --check-only n8n_deploy tests

    - name: Run type checking
      run: |
        mypy n8n_deploy || true  # Don't fail on type errors for now

    - name: Run tests with coverage
      run: |
        pytest --cov=n8n_deploy --cov-report=xml --cov-report=html --cov-report=term

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload coverage HTML report
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: htmlcov/

  cdk-synth:
    name: CDK Synthesis Test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install AWS CDK
      run: |
        npm install -g aws-cdk

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: CDK Synthesis
      run: |
        # Test synthesis for different environments
        cdk synth -c environment=dev --quiet
        cdk synth -c environment=staging --quiet
        cdk synth -c environment=production --quiet
        
        # Test with different stack types
        cdk synth -c environment=dev -c stack_type=minimal --quiet
        cdk synth -c environment=dev -c stack_type=standard --quiet

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Test Docker Compose Configuration
      run: |
        cd docker
        docker-compose config
        docker-compose -f docker-compose.yml -f docker-compose.prod.yml config

    - name: Build Docker images
      run: |
        cd docker
        docker-compose build --no-cache

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Run bandit security linter
      run: |
        pip install bandit
        bandit -r n8n_deploy -f json -o bandit-report.json || true

    - name: Upload bandit results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-report
        path: bandit-report.json