name: Deploy to AWS

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.github/**'
      - '!.github/workflows/deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - production
      stack_type:
        description: 'Stack type (optional)'
        required: false
        type: choice
        options:
          - ''
          - minimal
          - standard
          - enterprise

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy to ${{ github.event.inputs.environment || 'dev' }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install AWS CDK
      run: |
        npm install -g aws-cdk@2 --force

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
        aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

    - name: Set deployment parameters
      id: params
      run: |
        ENVIRONMENT="${{ github.event.inputs.environment || 'dev' }}"
        STACK_TYPE="${{ github.event.inputs.stack_type }}"
        
        echo "environment=${ENVIRONMENT}" >> $GITHUB_OUTPUT
        echo "stack_type=${STACK_TYPE}" >> $GITHUB_OUTPUT
        
        # Set stack suffix for different environments
        if [ "${ENVIRONMENT}" = "production" ]; then
          echo "require_approval=true" >> $GITHUB_OUTPUT
        else
          echo "require_approval=false" >> $GITHUB_OUTPUT
        fi

    - name: CDK Bootstrap (if needed)
      run: |
        cdk bootstrap aws://${{ secrets.AWS_ACCOUNT_ID }}/${{ vars.AWS_REGION || 'us-east-1' }} || true

    - name: CDK Diff
      run: |
        DEPLOY_CMD="cdk diff -c environment=${{ steps.params.outputs.environment }}"
        if [ -n "${{ steps.params.outputs.stack_type }}" ]; then
          DEPLOY_CMD="${DEPLOY_CMD} -c stack_type=${{ steps.params.outputs.stack_type }}"
        fi
        ${DEPLOY_CMD} || true

    - name: CDK Deploy
      run: |
        DEPLOY_CMD="cdk deploy -c environment=${{ steps.params.outputs.environment }}"
        if [ -n "${{ steps.params.outputs.stack_type }}" ]; then
          DEPLOY_CMD="${DEPLOY_CMD} -c stack_type=${{ steps.params.outputs.stack_type }}"
        fi
        
        if [ "${{ steps.params.outputs.require_approval }}" = "false" ]; then
          DEPLOY_CMD="${DEPLOY_CMD} --require-approval never"
        fi
        
        ${DEPLOY_CMD} --all

    - name: Get Stack Outputs
      id: outputs
      run: |
        # Get outputs from deployed stacks
        ENVIRONMENT="${{ steps.params.outputs.environment }}"
        
        # Get API URL
        API_URL=$(aws cloudformation describe-stacks \
          --stack-name "n8n-serverless-${ENVIRONMENT}-access" \
          --query 'Stacks[0].Outputs[?OutputKey==`ApiUrl`].OutputValue' \
          --output text 2>/dev/null || echo "Not found")
        
        # Get CloudFront URL
        CF_URL=$(aws cloudformation describe-stacks \
          --stack-name "n8n-serverless-${ENVIRONMENT}-access" \
          --query 'Stacks[0].Outputs[?OutputKey==`DistributionUrl`].OutputValue' \
          --output text 2>/dev/null || echo "Not found")
        
        echo "api_url=${API_URL}" >> $GITHUB_OUTPUT
        echo "cloudfront_url=${CF_URL}" >> $GITHUB_OUTPUT

    - name: Update deployment status
      if: always()
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const environment = '${{ steps.params.outputs.environment }}';
          const apiUrl = '${{ steps.outputs.api_url }}';
          const cfUrl = '${{ steps.outputs.cloudfront_url }}';
          
          let message = `ðŸš€ Deployment to **${environment}** `;
          if ('${{ job.status }}' === 'success') {
            message += 'completed successfully!\n\n';
            if (apiUrl !== 'Not found') {
              message += `- API URL: ${apiUrl}\n`;
            }
            if (cfUrl !== 'Not found') {
              message += `- CloudFront URL: ${cfUrl}\n`;
            }
          } else {
            message += 'failed. Check the logs for details.';
          }
          
          github.rest.repos.createCommitComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: context.sha,
            body: message
          });

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
    - name: Send notification
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const status = '${{ needs.deploy.result }}';
          const environment = '${{ github.event.inputs.environment || 'dev' }}';
          
          // This is where you'd integrate with Slack, Teams, etc.
          console.log(`Deployment to ${environment}: ${status}`);